#Load packages
library(gmapsdistance)
library(stringr)
library(dplyr)
library(measurements)
library(ggplot2)
library(kableExtra)

#Setting the API key:
set.api.key("AIzaSyB_etMYR_HyqgrnDSlqQMm417935SB9QAA")

#Import states and addresses for all parks
address_data = read.csv("/Users/katherineshockey/Google Drive/ISA 321/ISA 321 Project - Addresses.csv")

#Prepare data for gmapsdistance function
#Replace all spaces with "+" for cities
address_data$City_plus <- str_replace_all(address_data$City, " ", "+")

#Add "+" to end of all city strings
address_data$City_plus <- paste0(address_data$City_plus, "+")

#Replace all spaces with "+" for states
address_data$State_plus <- str_replace_all(address_data$State, " ", "+")

#Add combined variable of city and state
address_data$Address_Total <- paste0(address_data$City_plus, address_data$State_plus)
address_data$Address_Total_Clean <- paste0(address_data$City, " ", address_data$State)

#Package knowledge comes from:
#https://github.com/rodazuero/gmapsdistance

#Convert addresses to a list
addresses <- as.list(address_data$Address_Total)

#Run gmapsdistance for the combination of all parks
results = gmapsdistance(origin = addresses, 
                        destination = addresses, 
                        mode = "driving")

#Make a df of the distances matrix
results_df <- results[["Distance"]]

#Need to convert to miles
results_df[,-1] <- conv_unit(results_df[,-1], from = "m", to = "mi")

#EDA
#Count number of national parks by state
states <- address_data %>% 
  select(State) %>% 
  group_by(State) %>% 
  summarise(n=n())

#Bar chart for number of parks by state
ggplot(data=states, aes(x=State, y=n)) +
  geom_bar(stat="identity", fill="steelblue") +
  labs(y="Number of Parks", title="Number of National Parks by State in the U.S.") +
  theme_minimal() + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

#Rename columns and first row of distances matrix
colnames(results_df) <- str_sub(colnames(results_df), 10)
colnames(results_df) <- gsub("\\+", " ", colnames(results_df)) 
colnames(results_df)[1] <- "or"
results_df[,1] <- gsub("\\+", " ", results_df[,1]) 

#Merge the park name/address data with distances data
results_distances  <- merge(address_data, results_df, by.x = "Address_Total_Clean", by.y = "or")

#Save distances data to an RData file
save(results_distances, file = "ISA321_project_data.RData")

#Select the numeric variables
parks_distances <- results_distances %>% 
  select(8:61) 

#User numeric variables to calcuale mean, med, max, and sd of distances
parks_distances$mean <- round(rowMeans(parks_distances, na.rm=TRUE),digits = 0)
parks_distances$median <- round(apply(parks_distances, 1, function(x) { median(x, na.rm=TRUE) }),0)
parks_distances$max <- round(apply(parks_distances, 1, function(x) { max(x, na.rm=TRUE) }),0)
parks_distances$sd <- round(apply(parks_distances, 1, function(x) { sd(x, na.rm=TRUE) }),0)

#Combine park names back with numeric variables
Park_Summary <- cbind(results_distances$Park, parks_distances) %>% 
  filter(!is.na(`Bar Harbor Maine`))

#Create a summary statistics kable
Park_Summary %>% 
select(1, 56:59) %>%
`colnames<-`(c("Park", "Maximum", "Mean", "Median", "Standard Deviation")) %>% 
kable(digits=0, caption="Summary Statistics for Distances Between Parks in Miles") %>%
kable_styling(full_width=FALSE)


